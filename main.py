import telebot
import random
import time
import threading

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –∏ –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot_token = '000000000000000000'
bot = telebot.TeleBot(bot_token)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ Google Sheets
scope = ['https://spreadsheets.google.com/feeds',
         'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('0000000000.json', scope)
client = gspread.authorize(creds)

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É "users"
users_sheet = client.open('Ramesh-VIP-Bot').worksheet('users')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
def send_signal_message(user_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if user_id not in user_data:
        user_data[user_id] = {
            'registered': False,
            'last_received_signal_time': 0,
            'signal_count': 0
        }
    current_time = time.time()
    last_received_signal_time = user_data[user_id]['last_received_signal_time']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–∏–≥–Ω–∞–ª–∞
    if current_time - last_received_signal_time < 90:
        remaining_time = int(90 - (current_time - last_received_signal_time))
        bot.send_message(user_id, f"üò¥Wait {remaining_time} seconds to receive the next signal.üò¥")
        return

    user_data[user_id]['last_received_signal_time'] = current_time
    user_data[user_id]['signal_count'] += 1

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞
    lower_limit = round(random.uniform(1.3, 5.4), 1)
    recommended_stake = random.randrange(300, 1501, 20)
    message = f"Bet on {lower_limit}x ‚úÖ\n<strong>Amount from: {recommended_stake} INR</strong>"

    # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 5.5 –¥–æ 7.0 –ø—Ä–∏–º–µ—Ä–Ω–æ 10%
    if random.random() < 0.1:
        random_number = round(random.uniform(5.5, 7.0), 1)
        message = f"\nDon't miss the next signal {random_number}x ‚úÖ!!\n<strong>Amount from: {recommended_stake} INR</strong>"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(user_id, 'The bot calculated a new coefficient...‚è≥')
    time.sleep(3)
    bot.send_message(user_id, message, parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    users_sheet.append_row([username, user_id])
    bot.send_message(user_id, f"Welcome, {username}. This artificial intelligence based bot makes game calculations with 96% accuracy. Just follow the bot's instructions and ensure a rich life for yourself.", parse_mode='HTML')
    send_keyboard(user_id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help(message):
    user_id = message.from_user.id
    send_keyboard(user_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ "Support" –∏ "Receive Signal"
def send_keyboard(user_id):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_receive_signal = telebot.types.KeyboardButton("Receive Signalüí∏")
    item_support = telebot.types.KeyboardButton("Supportü¶∏")
    markup.row(item_receive_signal)
    markup.row(item_support)
    bot.send_message(user_id, "Choose an action:üëá", reply_markup=markup)

# –§—É–Ω–∫—Ü–∏—è Support
def get_support_button():
    markup = telebot.types.InlineKeyboardMarkup()
    item_support = telebot.types.InlineKeyboardButton(text="Contact supportü¶∏", url="https://google.com")
    markup.add(item_support)
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.from_user.id
    text = message.text

    if text == "Receive Signalüí∏":
        send_signal_message(user_id)

    elif text == "Supportü¶∏":
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        bot.send_message(user_id, text="ü¶∏Our 24/7 support will help you with any questions you may have!", reply_markup=get_support_button())


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True)
